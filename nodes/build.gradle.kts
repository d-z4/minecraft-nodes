/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// plugin versioning
version = "0.0.13"

// base of output jar name
val OUTPUT_JAR_NAME = "nodes"

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "2.3.0-Beta1"
    id("com.gradleup.shadow") version "8.3.6"
    // maven() // no longer needed in gradle 7

    id("io.papermc.paperweight.userdev") version "2.0.0-beta.17"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    maven { // paper
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven { // protocol lib
        url = uri("https://repo.dmulloy2.net/nexus/repository/public/")
    }
}

configurations {
    // config required for shadowed dependencies
    create("shadowImplementation") {
        isCanBeResolved = true
        isCanBeConsumed = true
    }

    // Special configuration with priority over compileOnly.
    // Required so we can include NMS and bukkit as dependency,
    // without overriding the paper API (which has slight differences
    // in api). See:
    // https://github.com/gradle/gradle/issues/10502
    // https://stackoverflow.com/questions/31698510/can-i-force-the-order-of-dependencies-in-my-classpath-with-gradle/47953373#47953373
    create("compileOnlyPriority") {
        isCanBeResolved = true
        isCanBeConsumed = true
        sourceSets["main"].compileClasspath = configurations["compileOnlyPriority"] + sourceSets["main"].compileClasspath
    }
}

dependencies {
    // Align versions of all Kotlin components
    compileOnly(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    compileOnly("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    if ( project.hasProperty("no-kotlin") == false ) { // shadow kotlin unless "no-kotlin" flag
        configurations["shadowImplementation"]("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    }

    // google json
    compileOnly("com.google.code.gson:gson:2.10") {
        version {
            strictly("2.10")
        }
    }
    // shadows gson dependency
    configurations["shadowImplementation"]("com.google.code.gson:gson:2.10") {
        version {
            strictly("2.10")
        }
    }
    // force overrides gson dependency inside paper mc
    configurations["compileOnlyPriority"]("com.google.code.gson:gson:2.10") {
        version {
            strictly("2.10")
        }
    }

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))
    // spigot/paper api
    paperweight.paperDevBundle("1.21.5-R0.1-SNAPSHOT") // contains 1.18.2 nms classes
    compileOnly("io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT")

    tasks {
        assemble {
            dependsOn(reobfJar)
        }
    }

    tasks.named("reobfJar") {
        dependsOn(tasks.jar)
        base.archivesBaseName = "${OUTPUT_JAR_NAME}"
    }

}

tasks {
    named<ShadowJar>("shadowJar") {

        archiveClassifier.set("")
        configurations = mutableListOf(project.configurations.named("shadowImplementation").get()) as List<FileCollection>
        relocate("com.google", "nodes.shadow.com.google")
    }
}

tasks {
    build {
        dependsOn(shadowJar)
    }

    test {
        testLogging.showStandardStreams = true
    }
}

gradle.taskGraph.whenReady {
    tasks {
        named<ShadowJar>("shadowJar") {
            archiveBaseName.set(OUTPUT_JAR_NAME)
            minimize()
        }
    }
}